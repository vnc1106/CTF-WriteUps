n = 0x72bae3105c52d6ca470aa6d21b1a8a9f2208951ca6cd71d1b484e38095e0558b32d9db2f926771dc4a93b6deebaf64d2978f0f4efc8f49db5571959e214c900a4bed54fa235ee72cec66c85bca819ea3fb1b4e3dd70e940d9067eb3d0a6a4abf6c152d7d1a19d0833532048ec84754c95eb8055b7e3817e65aea897e3e2a29764af08589a6271721c863df2386ceb9eea4f208ed8f45f0628d5ec3afcc416ab3dda4071a9fca2166e87f14a9475b1711a0b4ccdefab041a7e2a7b418155aed4a1bbc343a0c1a8d9af479ff7e62765bfb5f1762aa66c4b06ce44b5681977e027428b32811c8c539f0c631178ed60a863176cdd1fd73ee9cbe14eaa5e7010443cd
c = 0x4790c71b682f70a3e8aeaeb62b7b5c7381b27ab013d806631efd826da0bfc4ea7f343ad33ea0abdd14762acf5fcdf02b3e44646b8df7b09345ec2c43614a15e4e38bda58bf0b08f643e521d04f4d1eb06a4521351533b4140df785f12fa085db1e14dba803f00a25208167b359045d4491a49463f2423894dc69d92fc814229bf3d439b0d552732363af89605fc5bc035612b68c49d01c5ec185028d3d036332f6d5d7bccc1e65c7fe13aefb3c8a4ebeb8006092cb714b9040ec3147c0ec784cb6e6cae2456999afdc8fcacd3f3d2502d29b59be9f47e5ff192512ff6a37cf12837f3da1a1905de2d5a4ae7eea353c1b0c15c764bb10a45a21cdb84c3bf948ef
g = 3

from gmpy2 import *
from Crypto.Util.number import *


factorial = 1
for i in range(1, 100000):
    factorial *= i
 
p = gcd(pow(2, factorial, n) - 1, n)
q = n//p

p_phi_factor, q_phi_factor = [], []
for i in range(2, 200000):
    if (p - 1)%i == 0:
        p_phi_factor.append(i)
    if (q - 1)%i == 0:
        q_phi_factor.append(i)

n_phi_factor = [4, 20611, 30971, 32987, 33107, 33151, 33289, 33457, 33679, 34123, 34897, 35023, 35227, 35671, 36151, 37049, 37139, 39313, 39541, 40087, 40237, 40787, 41257, 41333, 41351, 41999, 42083, 42239, 43177, 43627, 44617, 44789, 45179, 46381, 46619, 46861, 47111, 48883, 49157, 50359, 50527, 50773, 50777, 50857, 50951, 51307, 51361, 51383, 51593, 52889, 52967, 53047, 54037, 54673, 56479, 56569, 57301, 58963, 59651, 61027, 61441, 61507, 62347, 62929, 62969, 63587, 64171, 64621, 65497, 66343, 67559, 67651, 67759, 67801, 68239, 71633, 73421, 74159, 74821, 77347, 78977, 79813, 82129, 82301, 82787, 84047, 87181, 87959, 88117, 88241, 89137, 89203, 90583, 91873, 92623, 93557, 93601, 94253, 94649, 95369, 97813, 97849, 98017, 99431, 100459, 101377, 101929, 103217, 103549, 106591, 106979, 111697, 112061, 112253, 112397, 114013, 116107, 116881, 117617, 118739, 119159, 119503, 120847, 121843, 121909, 124471, 126127, 126241, 130729]

def Shank_DLP(g, h, mod, ord):
    n =  1 + iroot(ord, 2)[0]
    base, BASE = g, pow(g, -n, mod)

    b_step = {pow(base, i, mod) : i for i in range(1, n+1)}
    g_step = {h * pow(BASE, i, mod) % mod : i for i in range(1, n+1)}

    for b in b_step:
        if b in g_step:
            return (b_step[b] + g_step[b] * n) % ord

def Pohlig_DLP(c, g, n_phi, n, n_factor):
    lst = []
    for x in n_factor:
        C, G = pow(c, n_phi//x, n), pow(g, n_phi//x, n)
        lst.append(Shank_DLP(G, C, n, x))
    return lst

def order(g, n, n_phi_Euler_factor, n_phi_Euler):
    for q in n_phi_Euler_factor[::-1]:
        Ord = n_phi_Euler//q
        if pow(g, Ord, n) == 1:
            return Ord
    return n_phi_Euler

def crt(a, m):
    M, D, n = 1, 0, len(m)
    for x in m:
        M, D = M*x, gcd(D, x)
    if D != 1:
        return -1
    b = [M//x for x in m]
    c = [invert(b[i], m[i]) for i in range(n)]
    x = 0
    for i in range(n):
        x = (x + a[i]*b[i]*c[i])%M
    return x

ord_g = order(g, n, n_phi_factor, (p - 1) * (q - 1))
rm_n = Pohlig_DLP(c, g, (p - 1) * (q - 1), n, n_phi_factor)


flag = crt(rm_n, n_phi_factor) % ord_g



print(long_to_bytes(flag))

#flag: picoCTF{e032a664}
#\x1c\xae\xb8\xc4\x17\x14\xb5\xb2\x91\xc2\xa9\xb4\x86\xc6\xa2\xa7\xc8\x82%G)\xb3\\tm!8\xe0%x\x15b\xcc\xb6v\xcb\xe4\x99\xdcw\x12\xa4\xed\xb7\xba\xeb\xd94\xa5\xe3\xc3\xd3\xbf#\xd2v\xd5\\eg\x88S$\x02\x92\xfbU>\x88\xd7\xb9\xcb;\x19\xb2\x16\xf2\xa0g\xa8\xfe\xc6\xd3\x8fu\xc3\xa5\x03d\x19\xfa\xcfB\x9a\x92\xaf\xdb\x05K_F\x86t \xcdL\x81#\xb2\x11\xd52W\xae\x01V\xdf\x8e\x05\xf9\x96\xba\xa2_\x8f\x8a\x8a];\x883\x89Vn\x0b\xb6z\xc4\x13j\x0f\x00\xa5\x96\x1d\x18\xfd\xa7GdN\\\xbePz+:9\xaaU\xe4U\xf2"m=\x1c`_\xa3/\xfd\x1b\x9c\x18\x91y\xc2\xeaHN\xdc\xa0\xb8a\x0bp\xad.\x90\xe8T\\\x84\x94b\xaa\xbac\n\x88vN\'\x96o\xf8f\x9e\x96:\xef\xd1\xdc\xd0\xd6:\x85\xa4\xbf\xaf\xf3\xce\x1f\x95O\xcc[\x8c\xbbQ3\xfb\x8f\x85\xc7\x06\x9c\x96\xb2\xef\x1e\x15\xff\xc7\xe3\x16/\t*8\x19\x1e\x84\xef\x0c
# p_phi_factor = [2, 20611, 30971, 32987, 33107, 33151, 33289, 33457, 33679, 34123, 34897, 35023, 35671, 36151, 37049, 37139, 39313, 39541, 40087, 40237, 40787, 41257, 41333, 41351, 41999, 42083, 42239, 43177, 43627, 44789, 45179, 46381, 46619, 46861, 47111, 48883, 49157, 50359, 50527, 50773, 50777, 50857, 50951, 51307, 51361, 51383, 51593, 52889, 52967, 53047, 54037, 54673, 56479, 56569, 57301, 58963, 59651, 61027, 61441, 61507, 62347, 62929, 62969, 63587, 64171, 64621, 65497]
# q_phi_factor = [2, 35227, 44617, 66343, 67559, 67651, 67759, 67801, 68239, 71633, 73421, 74159, 74821, 77347, 78977, 79813, 82129, 82301, 82787, 84047, 87181, 87959, 88117, 88241, 89137, 89203, 90583, 91873, 92623, 93557, 93601, 94253, 94649, 95369, 97813, 97849, 98017, 99431, 100459, 101377, 101929, 103217, 103549, 106591, 106979, 111697, 112061, 112253, 112397, 114013, 116107, 116881, 117617, 118739, 119159, 119503, 120847, 121843, 121909, 124471, 126127, 126241, 130729]
# p = 99755582215898641407852705728849845011216465185285211890507480631690828127706976150193361900607547572612649004926900810814622928574610545242732025536653312012118816651110903126840980322976744546241025457578454651121668690556783678825279039346489911822502647155696586387159134782652895389723477462451243655239
# q = 145188107204395996941237224511021728827449781357154531339825069878361330960402058326626961666006203200118414609080899168979077514608109257635499315648089844975963420428126473405468291778331429276352521506412236447510500004803301358005971579603665229996826267172950505836678077264366200199161972745420872759627
